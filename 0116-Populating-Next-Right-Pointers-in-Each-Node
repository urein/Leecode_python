"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root or not root.left:
            return root
        root.left.next = root.right
        if root.next:
            root.right.next = root.next.left
        
        self.connect(root.left)  
        self.connect(root.right)
        
        return root


总结：
使用递归。将root的left连接到right，且如果root.next不为NULL，还需要将root的right连接到root.next的left。
接下来再通过递归，分别让root.left和root.right作为新的root执行同样的操作。
操作完成后一定不要忘记返回root，因为本题要求函数返回一个Node。
递归出口：root为空或root的left为空（根据此题目的性质，此时root的right也一定为空），此时直接返回root
