class Solution:
    def maxArea(self, height: List[int]) -> int:
        
        max_area = 0
        i_left = 0
        i_right = len(height) - 1
        
        while i_left < i_right:
            
            cur_area = (i_right - i_left) * min(height[i_left], height[i_right])
            if cur_area > max_area:
                max_area = cur_area
            
            if height[i_left] < height[i_right]:
                i_left += 1
            elif height[i_left] >= height[i_right]:
                i_right -= 1
            else:
                if i_left + 1 != i_right - 1:
                    if height[i_left+1] < height[i_right-1]:
                        i_left += 1
                    else:
                        i_right -= 1
                else:
                    i_left += 1
        
        return max_area
        
        
        
总结：
从第一块板和最后一块板开始，不断将两块板向中间靠拢，并求取当前的水量，如果更大则保存下来。
木桶原则，我们更倾向让两侧的木板向更高的方向移动。因此在移动之前，先比较左右两块板，谁短则移动谁。
如果两块板一样长，则判断左板的右侧和右板的左侧谁短，谁短则移动该侧模板。之前需要判断左右两板的间距是否不小于2，如果小于2，移动谁都一样。
